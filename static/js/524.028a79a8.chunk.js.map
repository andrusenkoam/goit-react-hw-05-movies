{"version":3,"file":"static/js/524.028a79a8.chunk.js","mappings":"iJACA,QAA+B,mC,aCExB,MAAMA,EAAeC,IAAkB,IAAjB,QAAEC,GAASD,EACtC,OAAOE,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAiBC,SAAEJ,GAAY,C,qECJtD,MAAMK,EAAW,+BACXC,EAAU,mCAEHC,EAAoBA,IAC/BC,MAAM,GAAGH,gCAAuCC,YAErCG,EAAeC,GAC1BF,MAAM,GAAGH,WAAkBK,aAAcJ,KAE9BK,EAAiBC,GAC5BJ,MAAM,GAAGH,wBAA+BO,aAAgBN,YAE7CO,EAAeH,GAC1BF,MAAM,GAAGH,WAAkBK,qBAAsBJ,KAEtCQ,EAAiBJ,GAC5BF,MAAM,GAAGH,WAAkBK,qBAAsBJ,I,oGCfnD,QAA2B,uBAA3B,EAA6D,uBAA7D,EAAgG,wBAAhG,EAAmI,uBAAnI,EAAsK,wB,aCO/J,MAAMS,EAAOA,KAClB,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,OAC1BC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAOC,IAAYJ,EAAAA,EAAAA,WAAS,IAC7B,QAAEK,IAAYC,EAAAA,EAAAA,KAsBpB,IAlBAC,EAAAA,EAAAA,YAAU,KACRL,GAAa,IAEbP,EAAAA,EAAAA,IAAaU,GACVG,MAAKC,GACCA,EAAKC,GAMHD,EAAKE,OALHC,QAAQC,OACb,IAAIC,MAAM,wDAMfN,MAAKO,GAAQhB,EAAQgB,EAAKjB,QAC1BkB,OAAMb,GAASC,EAASD,KACxBc,SAAQ,IAAMf,GAAa,IAAO,GACpC,CAACG,IAECP,EAIL,OACEoB,EAAAA,EAAAA,MAACC,EAAAA,EAAO,CAAAjC,SAAA,CACLe,IAAalB,EAAAA,EAAAA,KAACqC,EAAAA,EAAM,IACpBjB,IAASpB,EAAAA,EAAAA,KAACH,EAAAA,EAAY,CAACE,QAASqB,EAAMrB,UACtB,IAAhBgB,EAAKuB,QACJtC,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAaC,SACzBY,EAAKwB,KAAIzC,IAAA,IAAC,GAAEW,EAAE,KAAEE,EAAI,aAAE6B,EAAY,UAAEC,GAAW3C,EAAA,OAC9CqC,EAAAA,EAAAA,MAAA,MAAIlC,UAAWC,EAAaC,SAAA,CACzBqC,GACCxC,EAAAA,EAAAA,KAAA,OAAK0C,IAAK,kCAAmBF,IAAgBG,IAAKhC,KAElDX,EAAAA,EAAAA,KAAA,OAAK0C,IAAK,wEAAeC,IAAKhC,KAEhCX,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAcC,SAAEQ,KAC/BwB,EAAAA,EAAAA,MAAA,KAAGlC,UAAWC,EAAaC,SAAA,CAAC,cAAYsC,OAPRhC,EAQ7B,OAITT,EAAAA,EAAAA,KAAA,KAAGC,UAAWC,EAAcC,SAAC,+EAKvB,C,iCC7Dd,QAA0B,yBAA1B,EAAkE,8B,aCE3D,MAAMiC,EAAUtC,IAA0B,IAAzB,MAAE8C,EAAK,SAAEzC,GAAUL,EACzC,OACEqC,EAAAA,EAAAA,MAAA,WAASlC,UAAWC,EAAYC,SAAA,CAC7ByC,IAAS5C,EAAAA,EAAAA,KAAA,MAAIC,UAAWC,EAAiBC,SAAEyC,IAC3CzC,IACO,C","sources":["webpack://goit-react-hw-05-movies/./src/components/ErrorMessage/ErrorMessage.module.css?d773","components/ErrorMessage/ErrorMessage.jsx","services/api.js","webpack://goit-react-hw-05-movies/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx","webpack://goit-react-hw-05-movies/./src/components/Section/Section.module.css?dbe8","components/Section/Section.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"errorMessage\":\"ErrorMessage_errorMessage__4OvLD\"};","import PropTypes from 'prop-types';\nimport css from './ErrorMessage.module.css';\n\nexport const ErrorMessage = ({ message }) => {\n  return <p className={css.errorMessage}>{message}</p>;\n};\n\nErrorMessage.propTypes = { message: PropTypes.string.isRequired };\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '14d14d317e7936ec61c7763e22ff83f6';\n\nexport const getTrendingMovies = () =>\n  fetch(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}&page=1`);\n\nexport const getMovieById = id =>\n  fetch(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`);\n\nexport const getMovieByName = name =>\n  fetch(`${BASE_URL}/search/movie?query=${name}&api_key=${API_KEY}&page=1`);\n\nexport const getFilmCasts = id =>\n  fetch(`${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`);\n\nexport const getFilmReviews = id =>\n  fetch(`${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`);\n","// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__ARoWn\",\"castItem\":\"Cast_castItem__-Jcfe\",\"castTitle\":\"Cast_castTitle__eoJbw\",\"castText\":\"Cast_castText__P--Rp\",\"castError\":\"Cast_castError__n3IZh\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Section } from 'components/Section/Section';\nimport { Loader } from 'components/Loader/Loader';\nimport { ErrorMessage } from 'components/ErrorMessage/ErrorMessage';\nimport { getFilmCasts } from 'services/api';\nimport css from './Cast.module.css';\n\nexport const Cast = () => {\n  const [cast, setCast] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n  const filmPosterUrl = `https://image.tmdb.org/t/p/w500`;\n  const noImages = `https://banffventureforum.com/wp-content/uploads/2019/08/No-Image.png`;\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getFilmCasts(movieId)\n      .then(resp => {\n        if (!resp.ok) {\n          return Promise.reject(\n            new Error('Oops, something went wrong. Repeat one more time!')\n          );\n        }\n\n        return resp.json();\n      })\n      .then(data => setCast(data.cast))\n      .catch(error => setError(error))\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <Section>\n      {isLoading && <Loader />}\n      {error && <ErrorMessage message={error.message} />}\n      {cast.length !== 0 ? (\n        <ul className={css.castList}>\n          {cast.map(({ id, name, profile_path, character }) => (\n            <li className={css.castItem} key={id}>\n              {profile_path ? (\n                <img src={`${filmPosterUrl}${profile_path}`} alt={name} />\n              ) : (\n                <img src={`${noImages}`} alt={name} />\n              )}\n              <h2 className={css.castTitle}>{name}</h2>\n              <p className={css.castText}>Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p className={css.castError}>\n          Unfortunately, we do not have information about the actors of this\n          film.\n        </p>\n      )}\n    </Section>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"Section_section__Z2PLw\",\"sectionTitle\":\"Section_sectionTitle__in2ym\"};","import PropTypes from 'prop-types';\nimport css from './Section.module.css';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <section className={css.section}>\n      {title && <h2 className={css.sectionTitle}>{title}</h2>}\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n"],"names":["ErrorMessage","_ref","message","_jsx","className","css","children","BASE_URL","API_KEY","getTrendingMovies","fetch","getMovieById","id","getMovieByName","name","getFilmCasts","getFilmReviews","Cast","cast","setCast","useState","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","then","resp","ok","json","Promise","reject","Error","data","catch","finally","_jsxs","Section","Loader","length","map","profile_path","character","src","alt","title"],"sourceRoot":""}